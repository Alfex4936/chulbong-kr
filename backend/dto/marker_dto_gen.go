package dto

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)


// DecodeMsg implements msgp.Decodable
func (z *FacilityQuantity) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FacilityID":
			z.FacilityID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "FacilityID")
				return
			}
		case "Quantity":
			z.Quantity, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Quantity")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FacilityQuantity) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "FacilityID"
	err = en.Append(0x82, 0xaa, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FacilityID)
	if err != nil {
		err = msgp.WrapError(err, "FacilityID")
		return
	}
	// write "Quantity"
	err = en.Append(0xa8, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Quantity)
	if err != nil {
		err = msgp.WrapError(err, "Quantity")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FacilityQuantity) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "FacilityID"
	o = append(o, 0x82, 0xaa, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44)
	o = msgp.AppendInt(o, z.FacilityID)
	// string "Quantity"
	o = append(o, 0xa8, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79)
	o = msgp.AppendInt(o, z.Quantity)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FacilityQuantity) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FacilityID":
			z.FacilityID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FacilityID")
				return
			}
		case "Quantity":
			z.Quantity, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Quantity")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FacilityQuantity) Msgsize() (s int) {
	s = 1 + 11 + msgp.IntSize + 9 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FacilityRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MarkerID":
			z.MarkerID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "Facilities":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Facilities")
				return
			}
			if cap(z.Facilities) >= int(zb0002) {
				z.Facilities = (z.Facilities)[:zb0002]
			} else {
				z.Facilities = make([]FacilityQuantity, zb0002)
			}
			for za0001 := range z.Facilities {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Facilities", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Facilities", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "FacilityID":
						z.Facilities[za0001].FacilityID, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Facilities", za0001, "FacilityID")
							return
						}
					case "Quantity":
						z.Facilities[za0001].Quantity, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Facilities", za0001, "Quantity")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Facilities", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FacilityRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "MarkerID"
	err = en.Append(0x82, 0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MarkerID)
	if err != nil {
		err = msgp.WrapError(err, "MarkerID")
		return
	}
	// write "Facilities"
	err = en.Append(0xaa, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Facilities)))
	if err != nil {
		err = msgp.WrapError(err, "Facilities")
		return
	}
	for za0001 := range z.Facilities {
		// map header, size 2
		// write "FacilityID"
		err = en.Append(0x82, 0xaa, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Facilities[za0001].FacilityID)
		if err != nil {
			err = msgp.WrapError(err, "Facilities", za0001, "FacilityID")
			return
		}
		// write "Quantity"
		err = en.Append(0xa8, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Facilities[za0001].Quantity)
		if err != nil {
			err = msgp.WrapError(err, "Facilities", za0001, "Quantity")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FacilityRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "MarkerID"
	o = append(o, 0x82, 0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MarkerID)
	// string "Facilities"
	o = append(o, 0xaa, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Facilities)))
	for za0001 := range z.Facilities {
		// map header, size 2
		// string "FacilityID"
		o = append(o, 0x82, 0xaa, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x44)
		o = msgp.AppendInt(o, z.Facilities[za0001].FacilityID)
		// string "Quantity"
		o = append(o, 0xa8, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79)
		o = msgp.AppendInt(o, z.Facilities[za0001].Quantity)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FacilityRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MarkerID":
			z.MarkerID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "Facilities":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Facilities")
				return
			}
			if cap(z.Facilities) >= int(zb0002) {
				z.Facilities = (z.Facilities)[:zb0002]
			} else {
				z.Facilities = make([]FacilityQuantity, zb0002)
			}
			for za0001 := range z.Facilities {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Facilities", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Facilities", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "FacilityID":
						z.Facilities[za0001].FacilityID, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Facilities", za0001, "FacilityID")
							return
						}
					case "Quantity":
						z.Facilities[za0001].Quantity, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Facilities", za0001, "Quantity")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Facilities", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FacilityRequest) Msgsize() (s int) {
	s = 1 + 9 + msgp.IntSize + 11 + msgp.ArrayHeaderSize + (len(z.Facilities) * (21 + msgp.IntSize + msgp.IntSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MarkerGroup) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CentralMarker":
			err = z.CentralMarker.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CentralMarker")
				return
			}
		case "NearbyMarkers":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NearbyMarkers")
				return
			}
			if cap(z.NearbyMarkers) >= int(zb0002) {
				z.NearbyMarkers = (z.NearbyMarkers)[:zb0002]
			} else {
				z.NearbyMarkers = make([]MarkerWithDistance, zb0002)
			}
			for za0001 := range z.NearbyMarkers {
				err = z.NearbyMarkers[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "NearbyMarkers", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MarkerGroup) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "CentralMarker"
	err = en.Append(0x82, 0xad, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.CentralMarker.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CentralMarker")
		return
	}
	// write "NearbyMarkers"
	err = en.Append(0xad, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NearbyMarkers)))
	if err != nil {
		err = msgp.WrapError(err, "NearbyMarkers")
		return
	}
	for za0001 := range z.NearbyMarkers {
		err = z.NearbyMarkers[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "NearbyMarkers", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MarkerGroup) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CentralMarker"
	o = append(o, 0x82, 0xad, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72)
	o, err = z.CentralMarker.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CentralMarker")
		return
	}
	// string "NearbyMarkers"
	o = append(o, 0xad, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NearbyMarkers)))
	for za0001 := range z.NearbyMarkers {
		o, err = z.NearbyMarkers[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "NearbyMarkers", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerGroup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CentralMarker":
			bts, err = z.CentralMarker.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CentralMarker")
				return
			}
		case "NearbyMarkers":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NearbyMarkers")
				return
			}
			if cap(z.NearbyMarkers) >= int(zb0002) {
				z.NearbyMarkers = (z.NearbyMarkers)[:zb0002]
			} else {
				z.NearbyMarkers = make([]MarkerWithDistance, zb0002)
			}
			for za0001 := range z.NearbyMarkers {
				bts, err = z.NearbyMarkers[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "NearbyMarkers", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MarkerGroup) Msgsize() (s int) {
	s = 1 + 14 + z.CentralMarker.Msgsize() + 14 + msgp.ArrayHeaderSize
	for za0001 := range z.NearbyMarkers {
		s += z.NearbyMarkers[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MarkerNewPicture) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "PhotoURL":
			z.PhotoURL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PhotoURL")
				return
			}
		case "MarkerID":
			z.MarkerID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MarkerNewPicture) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "PhotoURL"
	err = en.Append(0x82, 0xa8, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c)
	if err != nil {
		return
	}
	err = en.WriteString(z.PhotoURL)
	if err != nil {
		err = msgp.WrapError(err, "PhotoURL")
		return
	}
	// write "MarkerID"
	err = en.Append(0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MarkerID)
	if err != nil {
		err = msgp.WrapError(err, "MarkerID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MarkerNewPicture) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "PhotoURL"
	o = append(o, 0x82, 0xa8, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c)
	o = msgp.AppendString(o, z.PhotoURL)
	// string "MarkerID"
	o = append(o, 0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MarkerID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerNewPicture) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "PhotoURL":
			z.PhotoURL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PhotoURL")
				return
			}
		case "MarkerID":
			z.MarkerID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MarkerNewPicture) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.PhotoURL) + 9 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MarkerRSS) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UpdatedAt":
			z.UpdatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
		case "MarkerID":
			z.MarkerID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "Address":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MarkerRSS) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "UpdatedAt"
	err = en.Append(0x83, 0xa9, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.UpdatedAt)
	if err != nil {
		err = msgp.WrapError(err, "UpdatedAt")
		return
	}
	// write "MarkerID"
	err = en.Append(0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MarkerID)
	if err != nil {
		err = msgp.WrapError(err, "MarkerID")
		return
	}
	// write "Address"
	err = en.Append(0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MarkerRSS) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "UpdatedAt"
	o = append(o, 0x83, 0xa9, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.UpdatedAt)
	// string "MarkerID"
	o = append(o, 0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MarkerID)
	// string "Address"
	o = append(o, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerRSS) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UpdatedAt":
			z.UpdatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
		case "MarkerID":
			z.MarkerID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "Address":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MarkerRSS) Msgsize() (s int) {
	s = 1 + 10 + msgp.TimeSize + 9 + msgp.IntSize + 8 + msgp.StringPrefixSize + len(z.Address)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MarkerRank) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Clicks":
			z.Clicks, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Clicks")
				return
			}
		case "MarkerID":
			z.MarkerID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MarkerRank) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Clicks"
	err = en.Append(0x82, 0xa6, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Clicks)
	if err != nil {
		err = msgp.WrapError(err, "Clicks")
		return
	}
	// write "MarkerID"
	err = en.Append(0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.MarkerID)
	if err != nil {
		err = msgp.WrapError(err, "MarkerID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MarkerRank) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Clicks"
	o = append(o, 0x82, 0xa6, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73)
	o = msgp.AppendInt(o, z.Clicks)
	// string "MarkerID"
	o = append(o, 0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.MarkerID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerRank) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Clicks":
			z.Clicks, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Clicks")
				return
			}
		case "MarkerID":
			z.MarkerID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MarkerRank) Msgsize() (s int) {
	s = 1 + 7 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.MarkerID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MarkerRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "MarkerID":
			z.MarkerID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "Description":
			z.Description, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "PhotoURL":
			z.PhotoURL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PhotoURL")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MarkerRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Latitude"
	err = en.Append(0x85, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Latitude)
	if err != nil {
		err = msgp.WrapError(err, "Latitude")
		return
	}
	// write "Longitude"
	err = en.Append(0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Longitude)
	if err != nil {
		err = msgp.WrapError(err, "Longitude")
		return
	}
	// write "MarkerID"
	err = en.Append(0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MarkerID)
	if err != nil {
		err = msgp.WrapError(err, "MarkerID")
		return
	}
	// write "Description"
	err = en.Append(0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		err = msgp.WrapError(err, "Description")
		return
	}
	// write "PhotoURL"
	err = en.Append(0xa8, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c)
	if err != nil {
		return
	}
	err = en.WriteString(z.PhotoURL)
	if err != nil {
		err = msgp.WrapError(err, "PhotoURL")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MarkerRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Latitude"
	o = append(o, 0x85, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Latitude)
	// string "Longitude"
	o = append(o, 0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Longitude)
	// string "MarkerID"
	o = append(o, 0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MarkerID)
	// string "Description"
	o = append(o, 0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "PhotoURL"
	o = append(o, 0xa8, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c)
	o = msgp.AppendString(o, z.PhotoURL)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "MarkerID":
			z.MarkerID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "Description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "PhotoURL":
			z.PhotoURL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PhotoURL")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MarkerRequest) Msgsize() (s int) {
	s = 1 + 9 + msgp.Float64Size + 10 + msgp.Float64Size + 9 + msgp.IntSize + 12 + msgp.StringPrefixSize + len(z.Description) + 9 + msgp.StringPrefixSize + len(z.PhotoURL)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MarkerResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "MarkerID":
			z.MarkerID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "Description":
			z.Description, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MarkerResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Latitude"
	err = en.Append(0x84, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Latitude)
	if err != nil {
		err = msgp.WrapError(err, "Latitude")
		return
	}
	// write "Longitude"
	err = en.Append(0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Longitude)
	if err != nil {
		err = msgp.WrapError(err, "Longitude")
		return
	}
	// write "MarkerID"
	err = en.Append(0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MarkerID)
	if err != nil {
		err = msgp.WrapError(err, "MarkerID")
		return
	}
	// write "Description"
	err = en.Append(0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		err = msgp.WrapError(err, "Description")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MarkerResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Latitude"
	o = append(o, 0x84, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Latitude)
	// string "Longitude"
	o = append(o, 0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Longitude)
	// string "MarkerID"
	o = append(o, 0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MarkerID)
	// string "Description"
	o = append(o, 0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "MarkerID":
			z.MarkerID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "Description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MarkerResponse) Msgsize() (s int) {
	s = 1 + 9 + msgp.Float64Size + 10 + msgp.Float64Size + 9 + msgp.IntSize + 12 + msgp.StringPrefixSize + len(z.Description)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MarkerSimpleSlice) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.AppendArrayHeader(b, uint32(len(z)))
	for _, marker := range z {
		o, err = marker.MarshalMsg(o)
		if err != nil {
			return nil, err
		}
	}
	return o, nil
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerSimpleSlice) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var size uint32
	size, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return nil, err
	}

	*z = make(MarkerSimpleSlice, size)
	for i := range *z {
		bts, err = (*z)[i].UnmarshalMsg(bts)
		if err != nil {
			return nil, err
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MarkerSimpleSlice) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for _, marker := range z {
		s += marker.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MarkerSimple) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "MarkerID":
			z.MarkerID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "HasPhoto":
			z.HasPhoto, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "HasPhoto")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MarkerSimple) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Latitude"
	err = en.Append(0x84, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Latitude)
	if err != nil {
		err = msgp.WrapError(err, "Latitude")
		return
	}
	// write "Longitude"
	err = en.Append(0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Longitude)
	if err != nil {
		err = msgp.WrapError(err, "Longitude")
		return
	}
	// write "MarkerID"
	err = en.Append(0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MarkerID)
	if err != nil {
		err = msgp.WrapError(err, "MarkerID")
		return
	}
	// write "HasPhoto"
	err = en.Append(0xa8, 0x48, 0x61, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBool(z.HasPhoto)
	if err != nil {
		err = msgp.WrapError(err, "HasPhoto")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MarkerSimple) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Latitude"
	o = append(o, 0x84, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Latitude)
	// string "Longitude"
	o = append(o, 0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Longitude)
	// string "MarkerID"
	o = append(o, 0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MarkerID)
	// string "HasPhoto"
	o = append(o, 0xa8, 0x48, 0x61, 0x73, 0x50, 0x68, 0x6f, 0x74, 0x6f)
	o = msgp.AppendBool(o, z.HasPhoto)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerSimple) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "MarkerID":
			z.MarkerID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "HasPhoto":
			z.HasPhoto, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HasPhoto")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MarkerSimple) Msgsize() (s int) {
	s = 1 + 9 + msgp.Float64Size + 10 + msgp.Float64Size + 9 + msgp.IntSize + 9 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MarkerSimpleWithAddr) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "MarkerID":
			z.MarkerID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "Address":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MarkerSimpleWithAddr) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Latitude"
	err = en.Append(0x84, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Latitude)
	if err != nil {
		err = msgp.WrapError(err, "Latitude")
		return
	}
	// write "Longitude"
	err = en.Append(0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Longitude)
	if err != nil {
		err = msgp.WrapError(err, "Longitude")
		return
	}
	// write "MarkerID"
	err = en.Append(0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MarkerID)
	if err != nil {
		err = msgp.WrapError(err, "MarkerID")
		return
	}
	// write "Address"
	err = en.Append(0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MarkerSimpleWithAddr) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Latitude"
	o = append(o, 0x84, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Latitude)
	// string "Longitude"
	o = append(o, 0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Longitude)
	// string "MarkerID"
	o = append(o, 0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MarkerID)
	// string "Address"
	o = append(o, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerSimpleWithAddr) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "MarkerID":
			z.MarkerID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "Address":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MarkerSimpleWithAddr) Msgsize() (s int) {
	s = 1 + 9 + msgp.Float64Size + 10 + msgp.Float64Size + 9 + msgp.IntSize + 8 + msgp.StringPrefixSize + len(z.Address)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MarkerSimpleWithDescrption) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "MarkerID":
			z.MarkerID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "CreatedAt":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "Description":
			z.Description, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "Address":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MarkerSimpleWithDescrption) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Latitude"
	err = en.Append(0x86, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Latitude)
	if err != nil {
		err = msgp.WrapError(err, "Latitude")
		return
	}
	// write "Longitude"
	err = en.Append(0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Longitude)
	if err != nil {
		err = msgp.WrapError(err, "Longitude")
		return
	}
	// write "MarkerID"
	err = en.Append(0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MarkerID)
	if err != nil {
		err = msgp.WrapError(err, "MarkerID")
		return
	}
	// write "CreatedAt"
	err = en.Append(0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "Description"
	err = en.Append(0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		err = msgp.WrapError(err, "Description")
		return
	}
	// write "Address"
	err = en.Append(0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MarkerSimpleWithDescrption) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Latitude"
	o = append(o, 0x86, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Latitude)
	// string "Longitude"
	o = append(o, 0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Longitude)
	// string "MarkerID"
	o = append(o, 0xa8, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendInt(o, z.MarkerID)
	// string "CreatedAt"
	o = append(o, 0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "Description"
	o = append(o, 0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "Address"
	o = append(o, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerSimpleWithDescrption) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "MarkerID":
			z.MarkerID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MarkerID")
				return
			}
		case "CreatedAt":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "Description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "Address":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MarkerSimpleWithDescrption) Msgsize() (s int) {
	s = 1 + 9 + msgp.Float64Size + 10 + msgp.Float64Size + 9 + msgp.IntSize + 10 + msgp.TimeSize + 12 + msgp.StringPrefixSize + len(z.Description) + 8 + msgp.StringPrefixSize + len(z.Address)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MarkerWithDistance) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MarkerSimple":
			err = z.MarkerSimple.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "MarkerSimple")
				return
			}
		case "Distance":
			z.Distance, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Distance")
				return
			}
		case "Description":
			z.Description, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "Address":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Address")
					return
				}
				z.Address = nil
			} else {
				if z.Address == nil {
					z.Address = new(string)
				}
				*z.Address, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Address")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MarkerWithDistance) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "MarkerSimple"
	err = en.Append(0x84, 0xac, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = z.MarkerSimple.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "MarkerSimple")
		return
	}
	// write "Distance"
	err = en.Append(0xa8, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Distance)
	if err != nil {
		err = msgp.WrapError(err, "Distance")
		return
	}
	// write "Description"
	err = en.Append(0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		err = msgp.WrapError(err, "Description")
		return
	}
	// write "Address"
	err = en.Append(0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	if z.Address == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.Address)
		if err != nil {
			err = msgp.WrapError(err, "Address")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MarkerWithDistance) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "MarkerSimple"
	o = append(o, 0x84, 0xac, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65)
	o, err = z.MarkerSimple.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MarkerSimple")
		return
	}
	// string "Distance"
	o = append(o, 0xa8, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65)
	o = msgp.AppendFloat64(o, z.Distance)
	// string "Description"
	o = append(o, 0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "Address"
	o = append(o, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if z.Address == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.Address)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MarkerWithDistance) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MarkerSimple":
			bts, err = z.MarkerSimple.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MarkerSimple")
				return
			}
		case "Distance":
			z.Distance, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Distance")
				return
			}
		case "Description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "Address":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Address = nil
			} else {
				if z.Address == nil {
					z.Address = new(string)
				}
				*z.Address, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Address")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MarkerWithDistance) Msgsize() (s int) {
	s = 1 + 13 + z.MarkerSimple.Msgsize() + 9 + msgp.Float64Size + 12 + msgp.StringPrefixSize + len(z.Description) + 8
	if z.Address == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Address)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueryParams) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "Distance":
			z.Distance, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Distance")
				return
			}
		case "PageSize":
			z.PageSize, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PageSize")
				return
			}
		case "Page":
			z.Page, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Page")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QueryParams) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Latitude"
	err = en.Append(0x85, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Latitude)
	if err != nil {
		err = msgp.WrapError(err, "Latitude")
		return
	}
	// write "Longitude"
	err = en.Append(0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Longitude)
	if err != nil {
		err = msgp.WrapError(err, "Longitude")
		return
	}
	// write "Distance"
	err = en.Append(0xa8, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Distance)
	if err != nil {
		err = msgp.WrapError(err, "Distance")
		return
	}
	// write "PageSize"
	err = en.Append(0xa8, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PageSize)
	if err != nil {
		err = msgp.WrapError(err, "PageSize")
		return
	}
	// write "Page"
	err = en.Append(0xa4, 0x50, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Page)
	if err != nil {
		err = msgp.WrapError(err, "Page")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QueryParams) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Latitude"
	o = append(o, 0x85, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Latitude)
	// string "Longitude"
	o = append(o, 0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Longitude)
	// string "Distance"
	o = append(o, 0xa8, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65)
	o = msgp.AppendInt(o, z.Distance)
	// string "PageSize"
	o = append(o, 0xa8, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt(o, z.PageSize)
	// string "Page"
	o = append(o, 0xa4, 0x50, 0x61, 0x67, 0x65)
	o = msgp.AppendInt(o, z.Page)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueryParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "Distance":
			z.Distance, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Distance")
				return
			}
		case "PageSize":
			z.PageSize, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PageSize")
				return
			}
		case "Page":
			z.Page, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Page")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryParams) Msgsize() (s int) {
	s = 1 + 9 + msgp.Float64Size + 10 + msgp.Float64Size + 9 + msgp.IntSize + 9 + msgp.IntSize + 5 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WaterAPIResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "Water":
			z.Water, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Water")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z WaterAPIResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Latitude"
	err = en.Append(0x83, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Latitude)
	if err != nil {
		err = msgp.WrapError(err, "Latitude")
		return
	}
	// write "Longitude"
	err = en.Append(0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Longitude)
	if err != nil {
		err = msgp.WrapError(err, "Longitude")
		return
	}
	// write "Water"
	err = en.Append(0xa5, 0x57, 0x61, 0x74, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Water)
	if err != nil {
		err = msgp.WrapError(err, "Water")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z WaterAPIResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Latitude"
	o = append(o, 0x83, 0xa8, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Latitude)
	// string "Longitude"
	o = append(o, 0xa9, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Longitude)
	// string "Water"
	o = append(o, 0xa5, 0x57, 0x61, 0x74, 0x65, 0x72)
	o = msgp.AppendBool(o, z.Water)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WaterAPIResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Latitude":
			z.Latitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latitude")
				return
			}
		case "Longitude":
			z.Longitude, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Longitude")
				return
			}
		case "Water":
			z.Water, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Water")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z WaterAPIResponse) Msgsize() (s int) {
	s = 1 + 9 + msgp.Float64Size + 10 + msgp.Float64Size + 6 + msgp.BoolSize
	return
}
